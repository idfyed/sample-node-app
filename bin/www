#!/usr/bin/env node
/**
 * Copyright 2016 (C) Diglias AB
 *
 * @author jonas
 *
 */

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('node.js:server');

var https = require('https');
var fs = require('fs');
var path = require('path')

/**
 * Get port from environment and store in Express.
 */

require('ssl-root-cas')
    .inject()
    .addFile(path.join(__dirname, 'certs', 'server', 'my-private-root-ca.crt.pem'))
    ;

var options = {
    key: fs.readFileSync(path.join(__dirname, 'certs', 'server', 'my-server.key.pem'))
    // You don't need to specify `ca`, it's done by `ssl-root-cas`
    //, ca: [ fs.readFileSync(path.join(__dirname, 'certs', 'server', 'my-root-ca.crt.pem'))]
    , cert: fs.readFileSync(path.join(__dirname, 'certs', 'server', 'my-server.crt.pem'))
};

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = https.createServer(options, app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}

/**
 * Handle graceful shutdown
 */

var shutdown = function () {

    console.log('Shuttting down HTTP server');
    server.close(function () {
        console.log('HTTP server closed sucessfully');
        process.exit(0);
    });
    setTimeout(function () {
        console.log("Could not close connections in time, forcefully shutting down");
        process.exit()
    }, 10 * 1000);
};

process.on('SIGTERM', function () {
    console.log('Got signal SIGTERM, shutting down');
    shutdown();

});

process.on('SIGINT', function () {
    console.log('Got signal SIGINT, shutting down');
    shutdown();
});
